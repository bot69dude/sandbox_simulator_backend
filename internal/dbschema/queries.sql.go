// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package dbschema

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    email,
    name,
    hashed_password,
    profile_pic_url
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, email, name, hashed_password, profile_pic_url, created_at, updated_at
`

type CreateUserParams struct {
	Email          string         `json:"email"`
	Name           string         `json:"name"`
	HashedPassword string         `json:"hashed_password"`
	ProfilePicUrl  sql.NullString `json:"profile_pic_url"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser,
		arg.Email,
		arg.Name,
		arg.HashedPassword,
		arg.ProfilePicUrl,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.HashedPassword,
		&i.ProfilePicUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteUserStmt, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, name, hashed_password, profile_pic_url, created_at, updated_at FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.queryRow(ctx, q.getUserByEmailStmt, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.HashedPassword,
		&i.ProfilePicUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, name, hashed_password, profile_pic_url, created_at, updated_at FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.queryRow(ctx, q.getUserByIDStmt, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.HashedPassword,
		&i.ProfilePicUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :one
UPDATE users
SET 
    hashed_password = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, email, name, hashed_password, profile_pic_url, created_at, updated_at
`

type UpdateUserPasswordParams struct {
	ID             int32  `json:"id"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (User, error) {
	row := q.queryRow(ctx, q.updateUserPasswordStmt, updateUserPassword, arg.ID, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.HashedPassword,
		&i.ProfilePicUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserProfilePic = `-- name: UpdateUserProfilePic :one
UPDATE users
SET 
    profile_pic_url = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, email, name, hashed_password, profile_pic_url, created_at, updated_at
`

type UpdateUserProfilePicParams struct {
	ID            int32          `json:"id"`
	ProfilePicUrl sql.NullString `json:"profile_pic_url"`
}

func (q *Queries) UpdateUserProfilePic(ctx context.Context, arg UpdateUserProfilePicParams) (User, error) {
	row := q.queryRow(ctx, q.updateUserProfilePicStmt, updateUserProfilePic, arg.ID, arg.ProfilePicUrl)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.HashedPassword,
		&i.ProfilePicUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
